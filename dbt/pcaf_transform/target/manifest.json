{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
    "dbt_version": "1.3.2",
    "generated_at": "2023-04-09T13:11:15.133858Z",
    "invocation_id": "e31afc5b-addb-4a11-a607-f970df2fe01f",
    "env": {},
    "project_id": "800a84f4fc6464988e35b4a9c5c6327a",
    "user_id": "ea26acaa-7d9f-45ce-b34c-3f59757b230e",
    "send_anonymous_usage_stats": true,
    "adapter_type": "trino"
  },
  "nodes": {
    "model.pcaf_transform.sf_wdi_gdp": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_wdi_gdp"],
      "unique_id": "model.pcaf_transform.sf_wdi_gdp",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_wdi_gdp_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_wdi_gdp.sql",
      "original_file_path": "models/sf_wdi_gdp.sql",
      "name": "sf_wdi_gdp",
      "alias": "sf_wdi_gdp",
      "checksum": {
        "name": "sha256",
        "checksum": "d992242d56ae6851b3aeb63ee3b7b5ca29a8deac5d26be7f2ba4ad7108605e92"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nThis indicator provides per capita values for gross domestic product (GDP) expressed in current international dollars converted by purchasing power parity (PPP) conversion factor. \n\nGDP is the sum of gross value added by all resident producers in the country plus any product taxes and minus any subsidies not included in the value of the products. conversion factor is a spatial price deflator and currency converter that controls for price level differences between countries. Total population is a mid-year population based on the de facto definition of population, which counts all residents regardless of legal status or citizenship.",
      "columns": {
        "rec_source": {
          "name": "rec_source",
          "description": "API_NY.GDP.MKTP.CD_DS2_en_csv_v2.csv and API_NY.GDP.MKTP.PP.CD_DS2_en_csv_v2.csv",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "data_provider": {
          "name": "data_provider",
          "description": "WDI",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["WDI"]
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "GDP or GDP PPP",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "value of GDP or GDP PPP",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_wdi_gdp.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1680994227.458712,
      "compiled_code": "\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_wdi_gdp_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_wdi_gdp"
    },
    "model.pcaf_transform.sf_wdi_population": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_wdi_population"],
      "unique_id": "model.pcaf_transform.sf_wdi_population",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_wdi_population_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_wdi_population.sql",
      "original_file_path": "models/sf_wdi_population.sql",
      "name": "sf_wdi_population",
      "alias": "sf_wdi_population",
      "checksum": {
        "name": "sha256",
        "checksum": "13aeab5d10b30ad58e6616a6ec8ea366264ffb7301eb5c8a5a1a4e0fd6cfb594"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nTotal population is a mid-year population based on the de facto definition of population, which counts all residents regardless of legal status or citizenship.",
      "columns": {
        "rec_source": {
          "name": "rec_source",
          "description": "Population_Data.csv",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "data_provider": {
          "name": "data_provider",
          "description": "WDI",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["WDI"]
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Population, total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "Population",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "People, whether citizens or not",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_wdi_population.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681005747.907904,
      "compiled_code": "\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_wdi_population_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_wdi_population"
    },
    "model.pcaf_transform.sf_oecd_exgr_dco2": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_oecd_exgr_dco2"],
      "unique_id": "model.pcaf_transform.sf_oecd_exgr_dco2",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select attribute, country_iso_code, country_name, partner_iso_code, industry_code, industry_name, validity_date, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_exgr_dco2_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_oecd_exgr_dco2.sql",
      "original_file_path": "models/sf_oecd_exgr_dco2.sql",
      "name": "sf_oecd_exgr_dco2",
      "alias": "sf_oecd_exgr_dco2",
      "checksum": {
        "name": "sha256",
        "checksum": "76deeb65a55bd02513248bf347b2aca5ac44acb2bdd5e1051d7ddc3c3a0f225b"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nIMGR_DCO2 c,p,i Domestic CO2 emissions embodied in gross imports of country/region c with origin in exporting industry i in exporting country/region partner p.\nNote: Regions are treated as a unit, i.e., IMGR_DCO2 excludes intra-regional trade, as so, intra-region flows are considered as domestic.",
      "columns": {
        "data_provider": {
          "name": "data_provider",
          "description": "OECD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "partner_iso_code": {
          "name": "partner_iso_code",
          "description": "ISO-3166 Country Code (alpha_3) of the trading partner",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "industry_name": {
          "name": "industry_name",
          "description": "OECD Industry or Aggregation Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "industry_code": {
          "name": "industry_code",
          "description": "OECD Industry or Aggregation Code",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Domestic CO2 emissions embodied in gross exports",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "Mt CO2 emissions embodied in gross exports",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "Mt CO2",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_oecd_exgr_dco2.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1746864,
      "compiled_code": "\nwith source_data as (\n    select attribute, country_iso_code, country_name, partner_iso_code, industry_code, industry_name, validity_date, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_exgr_dco2_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_oecd_exgr_dco2"
    },
    "model.pcaf_transform.sf_unfccc_without_lulucf": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_unfccc_without_lulucf"],
      "unique_id": "model.pcaf_transform.sf_unfccc_without_lulucf",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_without_lulucf_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_unfccc_without_lulucf.sql",
      "original_file_path": "models/sf_unfccc_without_lulucf.sql",
      "name": "sf_unfccc_without_lulucf",
      "alias": "sf_unfccc_without_lulucf",
      "checksum": {
        "name": "sha256",
        "checksum": "d9f54582c4b047fe52ec0b0d7d6ecff813dd85186ad9aae2792c08ecfc46a9e6"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nUNFCCC GHG Total excluding LULUCF by country and year",
      "columns": {
        "rec_source": {
          "name": "rec_source",
          "description": "Annual_Net_emissions_removals_in_Gg_CO\u2082_equivalent_excl_LULUCF.csv and Time_Series_GHG_total_without_LULUCF_in_kt_CO\u2082_equivalent.xlsx",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "data_provider": {
          "name": "data_provider",
          "description": "UNFCCC",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Time Series - GHG total with LULUCF",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "kt CO\u2082 equivalent",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "kt CO2e",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_unfccc_without_lulucf.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1390119,
      "compiled_code": "\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_without_lulucf_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_unfccc_without_lulucf"
    },
    "model.pcaf_transform.sf_primap_hist_emissions": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_primap_hist_emissions"],
      "unique_id": "model.pcaf_transform.sf_primap_hist_emissions",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select rec_source, data_provider, country_name, country_iso_code, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_primap_hist_emissions_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_primap_hist_emissions.sql",
      "original_file_path": "models/sf_primap_hist_emissions.sql",
      "name": "sf_primap_hist_emissions",
      "alias": "sf_primap_hist_emissions",
      "checksum": {
        "name": "sha256",
        "checksum": "fc438c5673c06750f8be236368efb7783559a90ab2f3b66a5195670790960597"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nG\u00fctschow, J.; Pfl\u00fcger, M. (2023): The PRIMAP-hist national historical emissions time series v2.4.1 (1750-2021). zenodo. doi:10.5281/zenodo.7585420.",
      "columns": {
        "rec_source": {
          "name": "rec_source",
          "description": "Guetschow-et-al-2022-PRIMAP-hist_v2.4_11-Oct-2022.csv",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "data_provider": {
          "name": "data_provider",
          "description": "PRIMAP",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "KYOTOGHG (AR4GWP100)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "value of GDP or GDP PPP",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "kt CO2 / a",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_primap_hist_emissions.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1541631,
      "compiled_code": "\nwith source_data as (\n    select rec_source, data_provider, country_name, country_iso_code, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_primap_hist_emissions_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_primap_hist_emissions"
    },
    "model.pcaf_transform.sf_oecd_exch_rates": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_oecd_exch_rates"],
      "unique_id": "model.pcaf_transform.sf_oecd_exch_rates",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select attribute, country_iso_code, validity_date, value\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_exch_rates_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_oecd_exch_rates.sql",
      "original_file_path": "models/sf_oecd_exch_rates.sql",
      "name": "sf_oecd_exch_rates",
      "alias": "sf_oecd_exch_rates",
      "checksum": {
        "name": "sha256",
        "checksum": "4baad448f2e1cb935fb0d96a7ded100b3488de0684edd74ee020f8fe62b3c562"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nAverage annual exchange rate converting subject currency to USD.",
      "columns": {
        "data_provider": {
          "name": "data_provider",
          "description": "OECD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Foreign Currency Exchange Rate",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "Units per 1.0 USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_oecd_exch_rates.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1504402,
      "compiled_code": "\nwith source_data as (\n    select attribute, country_iso_code, validity_date, value\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_exch_rates_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_oecd_exch_rates"
    },
    "model.pcaf_transform.sf_oecd_imgr_fco2": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_oecd_imgr_fco2"],
      "unique_id": "model.pcaf_transform.sf_oecd_imgr_fco2",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select attribute, country_iso_code, country_name, partner_iso_code, industry_code, industry_name, validity_date, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_imgr_fco2_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_oecd_imgr_fco2.sql",
      "original_file_path": "models/sf_oecd_imgr_fco2.sql",
      "name": "sf_oecd_imgr_fco2",
      "alias": "sf_oecd_imgr_fco2",
      "checksum": {
        "name": "sha256",
        "checksum": "da9a10cbd0ee237717a02faf8582d65e99bf19bff7a1e70cd750ed33923f39aa"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nForeign CO2 emissions embodied in gross imports captures the foreign CO2 emissions embodied in gross imports of country/region c with origin in exporting industry i in exporting country/region partner p.\nNote: Regions are treated as a unit, i.e. IMGR_FCO2 excludes intra-regional trade, as so, intra-region flows are considered as domestic.",
      "columns": {
        "data_provider": {
          "name": "data_provider",
          "description": "OECD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "partner_iso_code": {
          "name": "partner_iso_code",
          "description": "ISO-3166 Country Code (alpha_3) of the trading partner",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "industry_name": {
          "name": "industry_name",
          "description": "OECD Industry or Aggregation Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "industry_code": {
          "name": "industry_code",
          "description": "OECD Industry or Aggregation Code",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Foreign CO2 emissions embodied in gross imports",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "Mt CO2 emissions embodied in gross imports",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "Mt CO2",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_oecd_imgr_fco2.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.147705,
      "compiled_code": "\nwith source_data as (\n    select attribute, country_iso_code, country_name, partner_iso_code, industry_code, industry_name, validity_date, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_oecd_imgr_fco2_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_oecd_imgr_fco2"
    },
    "model.pcaf_transform.sf_unfccc_with_lulucf": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_unfccc_with_lulucf"],
      "unique_id": "model.pcaf_transform.sf_unfccc_with_lulucf",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_with_lulucf_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_unfccc_with_lulucf.sql",
      "original_file_path": "models/sf_unfccc_with_lulucf.sql",
      "name": "sf_unfccc_with_lulucf",
      "alias": "sf_unfccc_with_lulucf",
      "checksum": {
        "name": "sha256",
        "checksum": "0ca6af5b73b4765a42317169fb4999a255c8fe262ae35215cae96d5b5928c56a"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nUNFCCC GHG Total with LULUCF by country and year",
      "columns": {
        "rec_source": {
          "name": "rec_source",
          "description": "Annual_Net_emissions_removals_in_Gg_CO\u2082_equivalent_incl_LULUCF.csv and Time_Series_GHG_total_with_LULUCF_in_kt_CO\u2082_equivalent.xlsx",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "data_provider": {
          "name": "data_provider",
          "description": "UNFCCC",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "country_name": {
          "name": "country_name",
          "description": "ISO-3166 Country Name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "attribute": {
          "name": "attribute",
          "description": "Time Series - GHG total with LULUCF",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value": {
          "name": "value",
          "description": "kt CO\u2082 equivalent",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "value_units": {
          "name": "value_units",
          "description": "kt CO2e",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_unfccc_with_lulucf.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1428332,
      "compiled_code": "\nwith source_data as (\n    select rec_source, data_provider, country_iso_code, country_name, validity_date, attribute, value, value_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_with_lulucf_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_unfccc_with_lulucf"
    },
    "model.pcaf_transform.sf_unfccc_results": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_unfccc_results"],
      "unique_id": "model.pcaf_transform.sf_unfccc_results",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select country_iso_code, country_name, validity_date, ghg_total_with_lulucf, ghg_total_with_lulucf_units, ghg_total_without_lulucf, ghg_total_without_lulucf_units, scope1_excl_source, gdp, gdp_units, gdp_ppp, gdp_ppp_units, ghg_intensity_with_lulucf_per_gdp, ghg_intensity_with_lulucf_per_gdp_units, ghg_intensity_without_lulucf_per_gdp, ghg_intensity_without_lulucf_per_gdp_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_results_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_unfccc_results.sql",
      "original_file_path": "models/sf_unfccc_results.sql",
      "name": "sf_unfccc_results",
      "alias": "sf_unfccc_results",
      "checksum": {
        "name": "sha256",
        "checksum": "d64809df0d7977c11065c6a995e0c27b6995936bb48f98460802cdd14f98a746"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": "target/compiled/pcaf_transform/models/sf_unfccc_results.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681014619.1255357,
      "compiled_code": "\nwith source_data as (\n    select country_iso_code, country_name, validity_date, ghg_total_with_lulucf, ghg_total_with_lulucf_units, ghg_total_without_lulucf, ghg_total_without_lulucf_units, scope1_excl_source, gdp, gdp_units, gdp_ppp, gdp_ppp_units, ghg_intensity_with_lulucf_per_gdp, ghg_intensity_with_lulucf_per_gdp_units, ghg_intensity_without_lulucf_per_gdp, ghg_intensity_without_lulucf_per_gdp_units\n    from osc_datacommons_dev.mdt_sandbox.sf_unfccc_results_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_unfccc_results"
    },
    "model.pcaf_transform.sf_total_sovereign_emissions": {
      "compiled": true,
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "view_security": "invoker",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "osc_datacommons_dev",
      "schema": "mdt_sandbox",
      "fqn": ["pcaf_transform", "sf_total_sovereign_emissions"],
      "unique_id": "model.pcaf_transform.sf_total_sovereign_emissions",
      "raw_code": "{{ config(materialized='view', view_security='invoker') }}\nwith source_data as (\n    select country_iso_code, validity_date, scope1_excl_lulucf, scope1_excl_lulucf_units, scope1_excl_source, scope1_incl_lulucf, scope1_incl_lulucf_units, scope2_value, scope2_value_units, scope3_value, scope3_value_units, exported_emissions, exported_emissions_units, gdp_ppp, gdp_ppp_units, gdp, gdp_units, consumption_emissions_excl_lulucf, consumption_emissions_excl_lulucf_units, consumption_emissions_incl_lulucf, consumption_emissions_incl_lulucf_units, population, consumption_emissions_excl_lulucf_per_capita, consumption_emissions_excl_lulucf_per_capita_units, consumption_emissions_incl_lulucf_per_capita, consumption_emissions_incl_lulucf_per_capita_units, attribution_factor_scope1_excl_lulucf, attribution_factor_scope1_excl_lulucf_units, attribution_factor_scope1_incl_lulucf, attribution_factor_scope1_incl_lulucf_units, attribution_factor_excl_lulucf, attribution_factor_excl_lulucf_units, attribution_factor_excl_lulucf_gdp, attribution_factor_excl_lulucf_gdp_units, attribution_factor_incl_lulucf, attribution_factor_incl_lulucf_units, attribution_factor_incl_lulucf_gdp, attribution_factor_incl_lulucf_gdp_units, scope1_incl_source, scope2_source, scope3_source, gdp_ppp_source, year\n    from osc_datacommons_dev.mdt_sandbox.sf_total_sovereign_emissions_source\n)\nselect * from source_data",
      "language": "sql",
      "package_name": "pcaf_transform",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform",
      "path": "sf_total_sovereign_emissions.sql",
      "original_file_path": "models/sf_total_sovereign_emissions.sql",
      "name": "sf_total_sovereign_emissions",
      "alias": "sf_total_sovereign_emissions",
      "checksum": {
        "name": "sha256",
        "checksum": "f60c75502ee31f14c844170f63b2dd6c28d6c0a30e6081077ceab276afb21096"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "\nUNFCCC sovereign emissions by country and year",
      "columns": {
        "country_iso_code": {
          "name": "country_iso_code",
          "description": "ISO-3166 Country Code (alpha_3)",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "validity_date": {
          "name": "validity_date",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "year": {
          "name": "year",
          "description": "Year of measurement",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["annual"]
        },
        "scope1_excl_lulucf": {
          "name": "scope1_excl_lulucf",
          "description": "if not NULL, Scope 1 emissions excluding LULUCF",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope1_excl_lulucf_units": {
          "name": "scope1_excl_lulucf_units",
          "description": "kt CO2eq",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope1_excl_source": {
          "name": "scope1_excl_source",
          "description": "UNFCC or PRIMAP or NULL",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope1_incl_lulucf": {
          "name": "scope1_incl_lulucf",
          "description": "if not NULL, Scope 1 emissions including LULUCF",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope1_incl_lulucf_units": {
          "name": "scope1_incl_lulucf_units",
          "description": "kt CO2eq",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope1_incl_source": {
          "name": "scope1_incl_source",
          "description": "UNFCC or PRIMAP or NULL",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope2_value": {
          "name": "scope2_value",
          "description": "if not NULL, Scope 2 emissions",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope2_value_units": {
          "name": "scope2_value_units",
          "description": "kt CO2eq",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope2_source": {
          "name": "scope2_source",
          "description": "OECD -> IMGR_FCO2.csv -> Industry_Code = D35  -> Aggregation grouped by Partner_ISO_CODE",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": ["ISO"]
        },
        "scope3_value": {
          "name": "scope3_value",
          "description": "if not NULL, Scope 3 emissions",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope3_value_units": {
          "name": "scope3_value_units",
          "description": "kt CO2eq",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "scope3_source": {
          "name": "scope3_source",
          "description": "OECD -> IMGR_FCO2.csv -> Indutry_Code = DTOTAL - Scope_2 Value",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "exported_emissions": {
          "name": "exported_emissions",
          "description": "if not NULL, exported emissions",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "exported_emissions_units": {
          "name": "exported_emissions_units",
          "description": "kt CO2eq",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gdp": {
          "name": "gdp",
          "description": "Gross Domestic Product",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gdp_units": {
          "name": "gdp_units",
          "description": "USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gdp_ppp": {
          "name": "gdp_ppp",
          "description": "Gross Domestic Product, normalized to Purchasing Power Parity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gdp_ppp_units": {
          "name": "gdp_ppp_units",
          "description": "USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gdp_ppp_source": {
          "name": "gdp_ppp_source",
          "description": "Worldbank -> API_NY.GDP.MKTP.CD_DS2_en_csv_v2_4019306.csv",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "consumption_emissions_excl_lulucf": {
          "name": "consumption_emissions_excl_lulucf",
          "description": "consumption emissions excluding LULUCH",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "consumption_emissions_excl_lulucf_units": {
          "name": "consumption_emissions_excl_lulucf_units",
          "description": "kt CO2e / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "consumption_emissions_incl_lulucf": {
          "name": "consumption_emissions_incl_lulucf",
          "description": "consumption emissions including LULUCH",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "consumption_emissions_incl_lulucf_unit": {
          "name": "consumption_emissions_incl_lulucf_unit",
          "description": "kt CO2e / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "population": {
          "name": "population",
          "description": "Population",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_scope1_excl_lulucf": {
          "name": "attribution_factor_scope1_excl_lulucf",
          "description": "if not NULL, Scope 1 emissions excluding LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_scope1_excl_lulucf_units": {
          "name": "attribution_factor_scope1_excl_lulucf_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_scope1_incl_lulucf": {
          "name": "attribution_factor_scope1_incl_lulucf",
          "description": "if not NULL, Scope 1 emissions including LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_scope1_incl_lulucf_units": {
          "name": "attribution_factor_scope1_incl_lulucf_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_excl_lulucf": {
          "name": "attribution_factor_excl_lulucf",
          "description": "if not NULL, emissions excluding LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_excl_lulucf_units": {
          "name": "attribution_factor_excl_lulucf_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_excl_lulucf_gdp": {
          "name": "attribution_factor_excl_lulucf_gdp",
          "description": "if not NULL, emissions excluding LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_excl_lulucf_gdp_units": {
          "name": "attribution_factor_excl_lulucf_gdp_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_incl_lulucf": {
          "name": "attribution_factor_incl_lulucf",
          "description": "if not NULL, emissions including LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_incl_lulucf_units": {
          "name": "attribution_factor_incl_lulucf_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_incl_lulucf_gdp": {
          "name": "attribution_factor_incl_lulucf_gdp",
          "description": "if not NULL, emissions including LULUCF per USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "attribution_factor_incl_lulucf_gdp_units": {
          "name": "attribution_factor_incl_lulucf_gdp_units",
          "description": "t CO2eq / USD",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "pcaf_transform://models/pcaf_schema.yml",
      "compiled_path": "target/compiled/pcaf_transform/models/sf_total_sovereign_emissions.sql",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "view_security": "invoker"
      },
      "created_at": 1681045858.6193056,
      "compiled_code": "\nwith source_data as (\n    select country_iso_code, validity_date, scope1_excl_lulucf, scope1_excl_lulucf_units, scope1_excl_source, scope1_incl_lulucf, scope1_incl_lulucf_units, scope2_value, scope2_value_units, scope3_value, scope3_value_units, exported_emissions, exported_emissions_units, gdp_ppp, gdp_ppp_units, gdp, gdp_units, consumption_emissions_excl_lulucf, consumption_emissions_excl_lulucf_units, consumption_emissions_incl_lulucf, consumption_emissions_incl_lulucf_units, population, consumption_emissions_excl_lulucf_per_capita, consumption_emissions_excl_lulucf_per_capita_units, consumption_emissions_incl_lulucf_per_capita, consumption_emissions_incl_lulucf_per_capita_units, attribution_factor_scope1_excl_lulucf, attribution_factor_scope1_excl_lulucf_units, attribution_factor_scope1_incl_lulucf, attribution_factor_scope1_incl_lulucf_units, attribution_factor_excl_lulucf, attribution_factor_excl_lulucf_units, attribution_factor_excl_lulucf_gdp, attribution_factor_excl_lulucf_gdp_units, attribution_factor_incl_lulucf, attribution_factor_incl_lulucf_units, attribution_factor_incl_lulucf_gdp, attribution_factor_incl_lulucf_gdp_units, scope1_incl_source, scope2_source, scope3_source, gdp_ppp_source, year\n    from osc_datacommons_dev.mdt_sandbox.sf_total_sovereign_emissions_source\n)\nselect * from source_data",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "relation_name": "osc_datacommons_dev.mdt_sandbox.sf_total_sovereign_emissions"
    }
  },
  "sources": {},
  "macros": {
    "macro.dbt_trino.trino__get_columns_in_relation": {
      "unique_id": "macro.dbt_trino.trino__get_columns_in_relation",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__get_columns_in_relation",
      "macro_sql": "{% macro trino__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['Column'].lower(), row['Type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9374774,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__list_relations_without_caching": {
      "unique_id": "macro.dbt_trino.trino__list_relations_without_caching",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__list_relations_without_caching",
      "macro_sql": "{% macro trino__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as database,\n      table_name as name,\n      table_schema as schema,\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n    from {{ relation.information_schema() }}.tables\n    where table_schema = '{{ relation.schema | lower }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9381714,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__reset_csv_table": {
      "unique_id": "macro.dbt_trino.trino__reset_csv_table",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__reset_csv_table",
      "macro_sql": "{% macro trino__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n    {{ return(create_csv_table(model, agate_table)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.938635,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__create_csv_table": {
      "unique_id": "macro.dbt_trino.trino__create_csv_table",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__create_csv_table",
      "macro_sql": "{% macro trino__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n  {%- set _properties = config.get('properties') -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    ) {{ properties(_properties) }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.properties", "macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9405358,
      "supported_languages": null
    },
    "macro.dbt_trino.properties": {
      "unique_id": "macro.dbt_trino.properties",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "properties",
      "macro_sql": "{% macro properties(properties) %}\n  {%- if properties is not none -%}\n      WITH (\n          {%- for key, value in properties.items() -%}\n            {{ key }} = {{ value }}\n            {%- if not loop.last -%}{{ ',\\n  ' }}{%- endif -%}\n          {%- endfor -%}\n      )\n  {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9412303,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__create_table_as": {
      "unique_id": "macro.dbt_trino.trino__create_table_as",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__create_table_as",
      "macro_sql": "{% macro trino__create_table_as(temporary, relation, sql) -%}\n  {%- set _properties = config.get('properties') -%}\n  create table {{ relation }}\n    {{ properties(_properties) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.properties"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9417222,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__create_view_as": {
      "unique_id": "macro.dbt_trino.trino__create_view_as",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__create_view_as",
      "macro_sql": "{% macro trino__create_view_as(relation, sql) -%}\n  {%- set view_security = config.get('view_security', 'definer') -%}\n  {%- if view_security not in ['definer', 'invoker'] -%}\n      {%- set log_message = 'Invalid value for view_security (%s) specified. Setting default value (%s).' % (view_security, 'definer') -%}\n      {% do log(log_message) %}\n      {%- set on_table_exists = 'definer' -%}\n  {% endif %}\n  create or replace view\n    {{ relation }}\n  security {{ view_security }}\n  as\n    {{ sql }}\n  ;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9426541,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__drop_relation": {
      "unique_id": "macro.dbt_trino.trino__drop_relation",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__drop_relation",
      "macro_sql": "{% macro trino__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9430964,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__information_schema_name": {
      "unique_id": "macro.dbt_trino.trino__information_schema_name",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__information_schema_name",
      "macro_sql": "{% macro trino__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9434133,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__drop_schema": {
      "unique_id": "macro.dbt_trino.trino__drop_schema",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__drop_schema",
      "macro_sql": "{% macro trino__drop_schema(relation) -%}\n  {% for row in list_relations_without_caching(relation) %}\n    {% set rel_db = row[0] %}\n    {% set rel_identifier = row[1] %}\n    {% set rel_schema = row[2] %}\n    {% set rel_type = api.Relation.get_relation_type(row[3]) %}\n    {% set existing = api.Relation.create(database=rel_db, schema=rel_schema, identifier=rel_identifier, type=rel_type) %}\n    {% do drop_relation(existing) %}\n  {% endfor %}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.list_relations_without_caching",
          "macro.dbt.drop_relation",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9449098,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__rename_relation": {
      "unique_id": "macro.dbt_trino.trino__rename_relation",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__rename_relation",
      "macro_sql": "{% macro trino__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter {{ from_relation.type }} {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9453607,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__alter_relation_comment": {
      "unique_id": "macro.dbt_trino.trino__alter_relation_comment",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__alter_relation_comment",
      "macro_sql": "{% macro trino__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} is '{{ relation_comment | replace(\"'\", \"''\") }}';\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.945751,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__alter_column_comment": {
      "unique_id": "macro.dbt_trino.trino__alter_column_comment",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__alter_column_comment",
      "macro_sql": "{% macro trino__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {%- if comment|length -%}\n      comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is '{{ comment | replace(\"'\", \"''\") }}';\n    {%- else -%}\n      comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is null;\n    {%- endif -%}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9472148,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__list_schemas": {
      "unique_id": "macro.dbt_trino.trino__list_schemas",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__list_schemas",
      "macro_sql": "{% macro trino__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.information_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9478126,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__check_schema_exists": {
      "unique_id": "macro.dbt_trino.trino__check_schema_exists",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__check_schema_exists",
      "macro_sql": "{% macro trino__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name = '{{ information_schema.database }}'\n          and schema_name = '{{ schema | lower }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9484723,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__get_binding_char": {
      "unique_id": "macro.dbt_trino.trino__get_binding_char",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__get_binding_char",
      "macro_sql": "{% macro trino__get_binding_char() %}\n  {%- if target.prepared_statements_enabled|as_bool -%}\n    {{ return('?') }}\n  {%- else -%}\n    {{ return('%s') }}\n  {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9489157,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt_trino.trino__alter_relation_add_remove_columns",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "trino__alter_relation_add_remove_columns",
      "macro_sql": "{% macro trino__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% for column in add_columns %}\n    {% set sql -%}\n      alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n    {%- endset -%}\n    {% do run_query(sql) %}\n  {% endfor %}\n\n  {% for column in remove_columns %}\n    {% set sql -%}\n      alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n    {%- endset -%}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9503782,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__get_show_grant_sql": {
      "unique_id": "macro.dbt_trino.trino__get_show_grant_sql",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/apply_grants.sql",
      "original_file_path": "macros/apply_grants.sql",
      "name": "trino__get_show_grant_sql",
      "macro_sql": "{% macro trino__get_show_grant_sql(relation) -%}\n    select\n        grantee,\n        lower(privilege_type) as privilege_type\n    from information_schema.table_privileges\n    where table_catalog = '{{ relation.database }}'\n    and table_schema = '{{ relation.schema }}'\n    and table_name = '{{ relation.identifier }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.951551,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__copy_grants": {
      "unique_id": "macro.dbt_trino.trino__copy_grants",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/apply_grants.sql",
      "original_file_path": "macros/apply_grants.sql",
      "name": "trino__copy_grants",
      "macro_sql": "{% macro trino__copy_grants() %}\n    {#\n        -- This macro should return true or false depending on the answer to\n        -- following question:\n        -- when an object is fully replaced on your database, do grants copy over?\n        -- e.g. on Postgres this is never true,\n        -- on Spark this is different for views vs. non-Delta tables vs. Delta tables,\n        -- on Snowflake it depends on the user-supplied copy_grants configuration.\n        -- true by default, which means \u201cplay it safe\u201d: grants MIGHT have copied over,\n        -- so dbt will run an extra query to check them + calculate diffs.\n    #}\n    {{ return(False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9518502,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__get_grant_sql": {
      "unique_id": "macro.dbt_trino.trino__get_grant_sql",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/apply_grants.sql",
      "original_file_path": "macros/apply_grants.sql",
      "name": "trino__get_grant_sql",
      "macro_sql": "\n\n{%- macro trino__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ adapter.quote(grantees[0]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.952248,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__support_multiple_grantees_per_dcl_statement": {
      "unique_id": "macro.dbt_trino.trino__support_multiple_grantees_per_dcl_statement",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/apply_grants.sql",
      "original_file_path": "macros/apply_grants.sql",
      "name": "trino__support_multiple_grantees_per_dcl_statement",
      "macro_sql": "\n\n{%- macro trino__support_multiple_grantees_per_dcl_statement() -%}\n    {#\n        -- This macro should return true or false depending on the answer to\n        -- following question:\n        -- does this database support grant {privilege} to user_a, user_b, ...?\n        -- or do user_a + user_b need their own separate grant statements?\n    #}\n    {{ return(False) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9525006,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__call_dcl_statements": {
      "unique_id": "macro.dbt_trino.trino__call_dcl_statements",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/apply_grants.sql",
      "original_file_path": "macros/apply_grants.sql",
      "name": "trino__call_dcl_statements",
      "macro_sql": "{% macro trino__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n        {% call statement('grant_or_revoke') %}\n            {{ dcl_statement }}\n        {% endcall %}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9529657,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__get_catalog": {
      "unique_id": "macro.dbt_trino.trino__get_catalog",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "name": "trino__get_catalog",
      "macro_sql": "{% macro trino__get_catalog(information_schema, schemas) -%}\n    {%- call statement('catalog', fetch_result=True) -%}\n        with tables as (\n\n            select\n                table_catalog as \"table_database\",\n                table_schema as \"table_schema\",\n                table_name as \"table_name\",\n                table_type as \"table_type\",\n                null as \"table_owner\"\n\n            from {{ information_schema }}.tables\n            where\n                table_schema != 'information_schema'\n                and\n                table_schema in ('{{ schemas | join(\"','\") | lower }}')\n\n        ),\n\n        columns as (\n\n            select\n                table_catalog as \"table_database\",\n                table_schema as \"table_schema\",\n                table_name as \"table_name\",\n\n                column_name as \"column_name\",\n                ordinal_position as \"column_index\",\n                data_type as \"column_type\",\n                comment as \"column_comment\"\n\n            from {{ information_schema }}.columns\n            where\n                table_schema != 'information_schema'\n                and\n                table_schema in ('{{ schemas | join(\"','\") | lower }}')\n\n        ),\n\n        table_comment as (\n\n            select\n                catalog_name as \"table_database\",\n                schema_name as \"table_schema\",\n                table_name as \"table_name\",\n                comment as \"table_comment\"\n\n            from system.metadata.table_comments\n            where\n                catalog_name = '{{ database }}'\n                and\n                schema_name != 'information_schema'\n                and\n                schema_name in ('{{ schemas | join(\"','\") | lower }}')\n        )\n\n        select *\n        from tables\n        join columns using (\"table_database\", \"table_schema\", \"table_name\")\n        join table_comment using (\"table_database\", \"table_schema\", \"table_name\")\n        order by \"column_index\"\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9551876,
      "supported_languages": null
    },
    "macro.dbt_trino.get_incremental_tmp_relation_type": {
      "unique_id": "macro.dbt_trino.get_incremental_tmp_relation_type",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "get_incremental_tmp_relation_type",
      "macro_sql": "{% macro get_incremental_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n  {%- set views_enabled = config.get('views_enabled', true) -%}\n\n  {% if language == 'sql' and (views_enabled and (strategy in ('default', 'append', 'merge') or (unique_key is none))) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9646196,
      "supported_languages": null
    },
    "macro.dbt_trino.materialization_incremental_trino": {
      "unique_id": "macro.dbt_trino.materialization_incremental_trino",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "materialization_incremental_trino",
      "macro_sql": "{% materialization incremental, adapter='trino', supported_languages=['sql'] -%}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = get_incremental_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n  -- the temp_ relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation.\n  {%- set preexisting_tmp_relation = load_cached_relation(tmp_relation)-%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  -- drop the temp relation if it exists already in the database\n  {{ drop_relation_if_exists(preexisting_tmp_relation) }}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {#-- Can't replace a table - we must drop --#}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt_trino.get_incremental_tmp_relation_type",
          "macro.dbt.make_temp_relation",
          "macro.dbt.load_cached_relation",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.create_view_as",
          "macro.dbt.process_schema_changes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9706593,
      "supported_languages": ["sql"]
    },
    "macro.dbt_trino.trino__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt_trino.trino__get_delete_insert_merge_sql",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "trino__get_delete_insert_merge_sql",
      "macro_sql": "{% macro trino__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where\n                {% for key in unique_key %}\n                    {{ target }}.{{ key }} in (select {{ key }} from {{ source }})\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            ;\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select {{ unique_key }}\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9720933,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__get_merge_sql": {
      "unique_id": "macro.dbt_trino.trino__get_merge_sql",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "trino__get_merge_sql",
      "macro_sql": "{% macro trino__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set dest_cols_csv_source = dest_cols_csv.split(', ') -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n\n        {{ sql_header if sql_header is not none }}\n\n        merge into {{ target }} as DBT_INTERNAL_DEST\n            using {{ source }} as DBT_INTERNAL_SOURCE\n            on {{ predicates | join(' and ') }}\n\n        {% if unique_key %}\n        when matched then update set\n            {% for column_name in update_columns -%}\n                {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n                {%- if not loop.last %}, {%- endif %}\n            {%- endfor %}\n        {% endif %}\n\n        when not matched then insert\n            ({{ dest_cols_csv }})\n        values\n            ({% for dest_cols in dest_cols_csv_source -%}\n                DBT_INTERNAL_SOURCE.{{ dest_cols }}\n                {%- if not loop.last %}, {% endif %}\n            {%- endfor %})\n\n    {% else %}\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source }}\n        )\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9753528,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__snapshot_hash_arguments": {
      "unique_id": "macro.dbt_trino.trino__snapshot_hash_arguments",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot.sql",
      "name": "trino__snapshot_hash_arguments",
      "macro_sql": "{% macro trino__snapshot_hash_arguments(args) -%}\n  lower(to_hex(md5(to_utf8(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as varchar), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9768367,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__post_snapshot": {
      "unique_id": "macro.dbt_trino.trino__post_snapshot",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot.sql",
      "name": "trino__post_snapshot",
      "macro_sql": "{% macro trino__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.drop_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.9771094,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__snapshot_merge_sql": {
      "unique_id": "macro.dbt_trino.trino__snapshot_merge_sql",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot.sql",
      "name": "trino__snapshot_merge_sql",
      "macro_sql": "{% macro trino__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({% for insert_col in insert_cols -%}\n            DBT_INTERNAL_SOURCE.{{ insert_col }}\n            {%- if not loop.last %}, {% endif %}\n            {%- endfor %})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944626.977849,
      "supported_languages": null
    },
    "macro.dbt_trino.materialization_table_trino": {
      "unique_id": "macro.dbt_trino.materialization_table_trino",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "name": "materialization_table_trino",
      "macro_sql": "{% materialization table, adapter = 'trino' %}\n  {%- set on_table_exists = config.get('on_table_exists', 'rename') -%}\n  {% if on_table_exists not in ['rename', 'drop'] %}\n      {%- set log_message = 'Invalid value for on_table_exists (%s) specified. Setting default value (%s).' % (on_table_exists, 'rename') -%}\n      {% do log(log_message) %}\n      {%- set on_table_exists = 'rename' -%}\n  {% endif %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n\n  {% if on_table_exists == 'rename' %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      -- the intermediate_relation should not already exist in the database; get_relation\n      -- will return None in that case. Otherwise, we get a relation that we can drop\n      -- later, before we try to use this name for the current operation\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n\n      {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n      {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n      -- as above, the backup_relation should not already exist\n      {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n\n      -- drop the temp relations if they exist already in the database\n      {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n      {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {% if on_table_exists == 'rename' %}\n      {#-- build modeldock #}\n      {% call statement('main') -%}\n        {{ create_table_as(False, intermediate_relation, sql) }}\n      {%- endcall %}\n\n      {#-- cleanup #}\n      {% if existing_relation is not none %}\n          {{ adapter.rename_relation(existing_relation, backup_relation) }}\n      {% endif %}\n\n      {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n      {#-- finally, drop the existing/backup relation after the commit #}\n      {{ drop_relation_if_exists(backup_relation) }}\n\n  {% elif on_table_exists == 'drop' %}\n      {#-- cleanup #}\n      {%- if existing_relation is not none -%}\n          {{ adapter.drop_relation(existing_relation) }}\n      {%- endif -%}\n\n      {#-- build model #}\n      {% call statement('main') -%}\n        {{ create_table_as(False, target_relation, sql) }}\n      {%- endcall %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.persist_docs",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.00047,
      "supported_languages": ["sql"]
    },
    "macro.dbt_trino.materialization_view_trino": {
      "unique_id": "macro.dbt_trino.materialization_view_trino",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/view.sql",
      "original_file_path": "macros/materializations/view.sql",
      "name": "materialization_view_trino",
      "macro_sql": "{% materialization view, adapter='trino' -%}\n    {% set to_return = create_or_replace_view() %}\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% do return(to_return) %}\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0015206,
      "supported_languages": ["sql"]
    },
    "macro.dbt_trino.trino__get_batch_size": {
      "unique_id": "macro.dbt_trino.trino__get_batch_size",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "trino__get_batch_size",
      "macro_sql": "{% macro trino__get_batch_size() %}\n  {{ return(1000) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0041523,
      "supported_languages": null
    },
    "macro.dbt_trino.create_bindings": {
      "unique_id": "macro.dbt_trino.create_bindings",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "create_bindings",
      "macro_sql": "{% macro create_bindings(row, types) %}\n  {% set values = [] %}\n  {% set re = modules.re %}\n\n  {%- for item in row -%}\n      {%- set type = types[loop.index0] -%}\n      {%- set match_type = re.match(\"(\\w+)(\\(.*\\))?\", type) -%}\n      {%- if item is not none and item is string and 'interval' in match_type.group(1) -%}\n        {%- do values.append((none, match_type.group(1).upper() ~ \" \" ~ item)) -%}\n      {%- elif item is not none and item is string and 'varchar' not in type.lower() -%}\n        {%- do values.append((none, match_type.group(1).upper() ~ \" '\" ~ item ~ \"'\")) -%}\n      {%- elif item is not none and 'varchar' in type.lower() -%}\n        {%- do values.append((get_binding_char(), item|string())) -%}\n      {%- else -%}\n        {%- do values.append((get_binding_char(), item)) -%}\n      {% endif -%}\n  {%- endfor -%}\n  {{ return(values) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_binding_char"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.006868,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__load_csv_rows": {
      "unique_id": "macro.dbt_trino.trino__load_csv_rows",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "trino__load_csv_rows",
      "macro_sql": "{% macro trino__load_csv_rows(model, agate_table) %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n  {% set types = [] %}\n\n  {%- for col_name in agate_table.column_names -%}\n      {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n      {%- set type = column_override.get(col_name, inferred_type) -%}\n      {%- do types.append(type) -%}\n  {%- endfor -%}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for tuple in create_bindings(row, types) -%}\n                  {%- if tuple.0 is not none  -%}\n                  {{ tuple.0 }}\n                  {%- do bindings.append(tuple.1) -%}\n                  {%- else -%}\n                  {{ tuple.1 }}\n                  {%- endif -%}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt_trino.create_bindings"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0101187,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__any_value": {
      "unique_id": "macro.dbt_trino.trino__any_value",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "name": "trino__any_value",
      "macro_sql": "{% macro trino__any_value(expression) -%}\n    min({{ expression }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0106964,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__array_append": {
      "unique_id": "macro.dbt_trino.trino__array_append",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "name": "trino__array_append",
      "macro_sql": "{% macro trino__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.01137,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__array_concat": {
      "unique_id": "macro.dbt_trino.trino__array_concat",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "name": "trino__array_concat",
      "macro_sql": "{% macro trino__array_concat(array_1, array_2) -%}\n    concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0119772,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__array_construct": {
      "unique_id": "macro.dbt_trino.trino__array_construct",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "name": "trino__array_construct",
      "macro_sql": "{% macro trino__array_construct(inputs, data_type) -%}\n    {%- if not inputs -%}\n    null\n    {%- else -%}\n    array[ {{ inputs|join(' , ') }} ]\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0127368,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__bool_or": {
      "unique_id": "macro.dbt_trino.trino__bool_or",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "name": "trino__bool_or",
      "macro_sql": "{% macro trino__bool_or(expression) -%}\n    bool_or({{ expression }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0132928,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__type_float": {
      "unique_id": "macro.dbt_trino.trino__type_float",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "trino__type_float",
      "macro_sql": "{% macro trino__type_float() -%}\n    double\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0138516,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__type_string": {
      "unique_id": "macro.dbt_trino.trino__type_string",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "trino__type_string",
      "macro_sql": "{% macro trino__type_string() -%}\n    varchar\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0140064,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__type_numeric": {
      "unique_id": "macro.dbt_trino.trino__type_numeric",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "trino__type_numeric",
      "macro_sql": "{% macro trino__type_numeric() -%}\n    decimal(28, 6)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.014155,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__type_int": {
      "unique_id": "macro.dbt_trino.trino__type_int",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "name": "trino__type_int",
      "macro_sql": "\n\n{%- macro trino__type_int() -%}\n    integer\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.014312,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__date_trunc": {
      "unique_id": "macro.dbt_trino.trino__date_trunc",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "name": "trino__date_trunc",
      "macro_sql": "{% macro trino__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0149207,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__dateadd": {
      "unique_id": "macro.dbt_trino.trino__dateadd",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "name": "trino__dateadd",
      "macro_sql": "{% macro trino__dateadd(datepart, interval, from_date_or_timestamp) -%}\n    date_add('{{ datepart }}', {{ interval }}, {{ from_date_or_timestamp }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0155768,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__datediff": {
      "unique_id": "macro.dbt_trino.trino__datediff",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "name": "trino__datediff",
      "macro_sql": "{% macro trino__datediff(first_date, second_date, datepart) -%}\n    {%- if datepart == 'year' -%}\n        (year(CAST({{ second_date }} AS TIMESTAMP)) - year(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'quarter' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 4) + quarter(CAST({{ second_date }} AS TIMESTAMP)) - quarter(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'month' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 12) + month(CAST({{ second_date }} AS TIMESTAMP)) - month(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'day' -%}\n        ((to_milliseconds((CAST(CAST({{ second_date }} AS TIMESTAMP) AS DATE) - CAST(CAST({{ first_date }} AS TIMESTAMP) AS DATE)))) / 86400000)\n    {%- elif datepart == 'week' -%}\n         ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when dow(CAST({{first_date}} AS TIMESTAMP)) <= dow(CAST({{second_date}} AS TIMESTAMP)) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {%- elif datepart == 'hour' -%}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + hour(CAST({{ second_date }} AS TIMESTAMP)) - hour(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'minute' -%}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + minute(CAST({{ second_date }} AS TIMESTAMP)) - minute(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'second' -%}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + second(CAST({{ second_date }} AS TIMESTAMP)) - second(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'millisecond' -%}\n        (to_milliseconds((CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP))))\n    {%- else -%}\n        {% if execute %}{{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in Trino: {!r}\".format(datepart)) }}{% endif %}\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0204785,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__hash": {
      "unique_id": "macro.dbt_trino.trino__hash",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "name": "trino__hash",
      "macro_sql": "{% macro trino__hash(field) -%}\n    lower(to_hex(md5(to_utf8(cast({{field}} as varchar)))))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0210483,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__listagg": {
      "unique_id": "macro.dbt_trino.trino__listagg",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "name": "trino__listagg",
      "macro_sql": "{% macro trino__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% set collect_list %} array_agg({{ measure }} {% if order_by_clause -%}{{ order_by_clause }}{%- endif %}) {% endset %}\n    {% set limited %} slice({{ collect_list }}, 1, {{ limit_num }}) {% endset %}\n    {% set collected = limited if limit_num else collect_list %}\n    {% set final %} array_join({{ collected }}, {{ delimiter_text }}) {% endset %}\n    {% do return(final) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0225892,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__right": {
      "unique_id": "macro.dbt_trino.trino__right",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "name": "trino__right",
      "macro_sql": "{% macro trino__right(string_text, length_expression) %}\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr({{ string_text }}, -1 * ({{ length_expression }}))\n    end\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0232852,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__safe_cast": {
      "unique_id": "macro.dbt_trino.trino__safe_cast",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "name": "trino__safe_cast",
      "macro_sql": "{% macro trino__safe_cast(field, type) -%}\n    try_cast({{field}} as {{type}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.023889,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__split_part": {
      "unique_id": "macro.dbt_trino.trino__split_part",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "trino__split_part",
      "macro_sql": "{% macro trino__split_part(string_text, delimiter_text, part_number) %}\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__split_part",
          "macro.dbt._split_part_negative"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0249193,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__current_timestamp": {
      "unique_id": "macro.dbt_trino.trino__current_timestamp",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/timestamps.sql",
      "original_file_path": "macros/utils/timestamps.sql",
      "name": "trino__current_timestamp",
      "macro_sql": "{% macro trino__current_timestamp() -%}\n    current_timestamp\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.025463,
      "supported_languages": null
    },
    "macro.dbt_trino.trino__snapshot_string_as_time": {
      "unique_id": "macro.dbt_trino.trino__snapshot_string_as_time",
      "package_name": "dbt_trino",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/trino",
      "path": "macros/utils/timestamps.sql",
      "original_file_path": "macros/utils/timestamps.sql",
      "name": "trino__snapshot_string_as_time",
      "macro_sql": "{% macro trino__snapshot_string_as_time(timestamp) %}\n    {%- set result = \"timestamp '\" ~ timestamp ~ \"'\" -%}\n    {{ return(result) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0258377,
      "supported_languages": null
    },
    "macro.dbt.copy_grants": {
      "unique_id": "macro.dbt.copy_grants",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "copy_grants",
      "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__copy_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0288765,
      "supported_languages": null
    },
    "macro.dbt.default__copy_grants": {
      "unique_id": "macro.dbt.default__copy_grants",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__copy_grants",
      "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0291264,
      "supported_languages": null
    },
    "macro.dbt.support_multiple_grantees_per_dcl_statement": {
      "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "support_multiple_grantees_per_dcl_statement",
      "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_trino.trino__support_multiple_grantees_per_dcl_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0294487,
      "supported_languages": null
    },
    "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
      "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__support_multiple_grantees_per_dcl_statement",
      "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0296705,
      "supported_languages": null
    },
    "macro.dbt.should_revoke": {
      "unique_id": "macro.dbt.should_revoke",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "should_revoke",
      "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.copy_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0303423,
      "supported_languages": null
    },
    "macro.dbt.get_show_grant_sql": {
      "unique_id": "macro.dbt.get_show_grant_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_show_grant_sql",
      "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_show_grant_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.030707,
      "supported_languages": null
    },
    "macro.dbt.default__get_show_grant_sql": {
      "unique_id": "macro.dbt.default__get_show_grant_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_show_grant_sql",
      "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0309348,
      "supported_languages": null
    },
    "macro.dbt.get_grant_sql": {
      "unique_id": "macro.dbt.get_grant_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_grant_sql",
      "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_grant_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0313625,
      "supported_languages": null
    },
    "macro.dbt.default__get_grant_sql": {
      "unique_id": "macro.dbt.default__get_grant_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_grant_sql",
      "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.031727,
      "supported_languages": null
    },
    "macro.dbt.get_revoke_sql": {
      "unique_id": "macro.dbt.get_revoke_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_revoke_sql",
      "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_revoke_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0321734,
      "supported_languages": null
    },
    "macro.dbt.default__get_revoke_sql": {
      "unique_id": "macro.dbt.default__get_revoke_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_revoke_sql",
      "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0325367,
      "supported_languages": null
    },
    "macro.dbt.get_dcl_statement_list": {
      "unique_id": "macro.dbt.get_dcl_statement_list",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_dcl_statement_list",
      "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_dcl_statement_list"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.032982,
      "supported_languages": null
    },
    "macro.dbt.default__get_dcl_statement_list": {
      "unique_id": "macro.dbt.default__get_dcl_statement_list",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_dcl_statement_list",
      "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.034236,
      "supported_languages": null
    },
    "macro.dbt.call_dcl_statements": {
      "unique_id": "macro.dbt.call_dcl_statements",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "call_dcl_statements",
      "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__call_dcl_statements"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0346155,
      "supported_languages": null
    },
    "macro.dbt.default__call_dcl_statements": {
      "unique_id": "macro.dbt.default__call_dcl_statements",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__call_dcl_statements",
      "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.035107,
      "supported_languages": null
    },
    "macro.dbt.apply_grants": {
      "unique_id": "macro.dbt.apply_grants",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "apply_grants",
      "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__apply_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.035538,
      "supported_languages": null
    },
    "macro.dbt.default__apply_grants": {
      "unique_id": "macro.dbt.default__apply_grants",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__apply_grants",
      "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.get_show_grant_sql",
          "macro.dbt.get_dcl_statement_list",
          "macro.dbt.call_dcl_statements"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0377514,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_relation": {
      "unique_id": "macro.dbt.get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__get_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.040604,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_relation": {
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0409336,
      "supported_languages": null
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0415204,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_query": {
      "unique_id": "macro.dbt.get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0418854,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_query": {
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0425327,
      "supported_languages": null
    },
    "macro.dbt.alter_column_type": {
      "unique_id": "macro.dbt.alter_column_type",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__alter_column_type"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0429795,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_type": {
      "unique_id": "macro.dbt.default__alter_column_type",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0440888,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__alter_relation_add_remove_columns"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.044567,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0460327,
      "supported_languages": null
    },
    "macro.dbt.collect_freshness": {
      "unique_id": "macro.dbt.collect_freshness",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__collect_freshness"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.047078,
      "supported_languages": null
    },
    "macro.dbt.default__collect_freshness": {
      "unique_id": "macro.dbt.default__collect_freshness",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0478687,
      "supported_languages": null
    },
    "macro.dbt.get_create_index_sql": {
      "unique_id": "macro.dbt.get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_create_index_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0489457,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_index_sql": {
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0492222,
      "supported_languages": null
    },
    "macro.dbt.create_indexes": {
      "unique_id": "macro.dbt.create_indexes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_indexes"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0495276,
      "supported_languages": null
    },
    "macro.dbt.default__create_indexes": {
      "unique_id": "macro.dbt.default__create_indexes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0503025,
      "supported_languages": null
    },
    "macro.dbt.get_catalog": {
      "unique_id": "macro.dbt.get_catalog",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_catalog"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0529284,
      "supported_languages": null
    },
    "macro.dbt.default__get_catalog": {
      "unique_id": "macro.dbt.default__get_catalog",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0534375,
      "supported_languages": null
    },
    "macro.dbt.information_schema_name": {
      "unique_id": "macro.dbt.information_schema_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__information_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0538075,
      "supported_languages": null
    },
    "macro.dbt.default__information_schema_name": {
      "unique_id": "macro.dbt.default__information_schema_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0541224,
      "supported_languages": null
    },
    "macro.dbt.list_schemas": {
      "unique_id": "macro.dbt.list_schemas",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__list_schemas"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0544744,
      "supported_languages": null
    },
    "macro.dbt.default__list_schemas": {
      "unique_id": "macro.dbt.default__list_schemas",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0550737,
      "supported_languages": null
    },
    "macro.dbt.check_schema_exists": {
      "unique_id": "macro.dbt.check_schema_exists",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__check_schema_exists"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0554583,
      "supported_languages": null
    },
    "macro.dbt.default__check_schema_exists": {
      "unique_id": "macro.dbt.default__check_schema_exists",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.replace", "macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0560384,
      "supported_languages": null
    },
    "macro.dbt.list_relations_without_caching": {
      "unique_id": "macro.dbt.list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__list_relations_without_caching"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.056391,
      "supported_languages": null
    },
    "macro.dbt.default__list_relations_without_caching": {
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0566998,
      "supported_languages": null
    },
    "macro.dbt.alter_column_comment": {
      "unique_id": "macro.dbt.alter_column_comment",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__alter_column_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0581152,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_comment": {
      "unique_id": "macro.dbt.default__alter_column_comment",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0584552,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_comment": {
      "unique_id": "macro.dbt.alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__alter_relation_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0588524,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_comment": {
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0591772,
      "supported_languages": null
    },
    "macro.dbt.persist_docs": {
      "unique_id": "macro.dbt.persist_docs",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__persist_docs"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0596728,
      "supported_languages": null
    },
    "macro.dbt.default__persist_docs": {
      "unique_id": "macro.dbt.default__persist_docs",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.060567,
      "supported_languages": null
    },
    "macro.dbt.make_intermediate_relation": {
      "unique_id": "macro.dbt.make_intermediate_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_intermediate_relation",
      "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__make_intermediate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0658596,
      "supported_languages": null
    },
    "macro.dbt.default__make_intermediate_relation": {
      "unique_id": "macro.dbt.default__make_intermediate_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_intermediate_relation",
      "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_temp_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0661833,
      "supported_languages": null
    },
    "macro.dbt.make_temp_relation": {
      "unique_id": "macro.dbt.make_temp_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_temp_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0666022,
      "supported_languages": null
    },
    "macro.dbt.default__make_temp_relation": {
      "unique_id": "macro.dbt.default__make_temp_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.067158,
      "supported_languages": null
    },
    "macro.dbt.make_backup_relation": {
      "unique_id": "macro.dbt.make_backup_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_backup_relation",
      "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_backup_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0676165,
      "supported_languages": null
    },
    "macro.dbt.default__make_backup_relation": {
      "unique_id": "macro.dbt.default__make_backup_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_backup_relation",
      "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0682225,
      "supported_languages": null
    },
    "macro.dbt.drop_relation": {
      "unique_id": "macro.dbt.drop_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__drop_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.068573,
      "supported_languages": null
    },
    "macro.dbt.default__drop_relation": {
      "unique_id": "macro.dbt.default__drop_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0689986,
      "supported_languages": null
    },
    "macro.dbt.truncate_relation": {
      "unique_id": "macro.dbt.truncate_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__truncate_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0693505,
      "supported_languages": null
    },
    "macro.dbt.default__truncate_relation": {
      "unique_id": "macro.dbt.default__truncate_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0696704,
      "supported_languages": null
    },
    "macro.dbt.rename_relation": {
      "unique_id": "macro.dbt.rename_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__rename_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0700698,
      "supported_languages": null
    },
    "macro.dbt.default__rename_relation": {
      "unique_id": "macro.dbt.default__rename_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0707402,
      "supported_languages": null
    },
    "macro.dbt.get_or_create_relation": {
      "unique_id": "macro.dbt.get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_or_create_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0712237,
      "supported_languages": null
    },
    "macro.dbt.default__get_or_create_relation": {
      "unique_id": "macro.dbt.default__get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__get_or_create_relation",
      "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0722299,
      "supported_languages": null
    },
    "macro.dbt.load_cached_relation": {
      "unique_id": "macro.dbt.load_cached_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "load_cached_relation",
      "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0726585,
      "supported_languages": null
    },
    "macro.dbt.load_relation": {
      "unique_id": "macro.dbt.load_relation",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.load_cached_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0729501,
      "supported_languages": null
    },
    "macro.dbt.drop_relation_if_exists": {
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0733204,
      "supported_languages": null
    },
    "macro.dbt.create_schema": {
      "unique_id": "macro.dbt.create_schema",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0742743,
      "supported_languages": null
    },
    "macro.dbt.default__create_schema": {
      "unique_id": "macro.dbt.default__create_schema",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0746408,
      "supported_languages": null
    },
    "macro.dbt.drop_schema": {
      "unique_id": "macro.dbt.drop_schema",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__drop_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0749698,
      "supported_languages": null
    },
    "macro.dbt.default__drop_schema": {
      "unique_id": "macro.dbt.default__drop_schema",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0753224,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp": {
      "unique_id": "macro.dbt.current_timestamp",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp",
      "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.076433,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp": {
      "unique_id": "macro.dbt.default__current_timestamp",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.076721,
      "supported_languages": null
    },
    "macro.dbt.snapshot_get_time": {
      "unique_id": "macro.dbt.snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "snapshot_get_time",
      "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__snapshot_get_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0770133,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_get_time": {
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0772228,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_backcompat": {
      "unique_id": "macro.dbt.current_timestamp_backcompat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp_backcompat",
      "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0775347,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_backcompat": {
      "unique_id": "macro.dbt.default__current_timestamp_backcompat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp_backcompat",
      "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0776894,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_in_utc_backcompat": {
      "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0780113,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_in_utc_backcompat": {
      "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.current_timestamp_backcompat",
          "macro.dbt.default__current_timestamp_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0783372,
      "supported_languages": null
    },
    "macro.dbt.convert_datetime": {
      "unique_id": "macro.dbt.convert_datetime",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0814457,
      "supported_languages": null
    },
    "macro.dbt.dates_in_range": {
      "unique_id": "macro.dbt.dates_in_range",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.convert_datetime"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.083801,
      "supported_languages": null
    },
    "macro.dbt.partition_range": {
      "unique_id": "macro.dbt.partition_range",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.dates_in_range"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.085179,
      "supported_languages": null
    },
    "macro.dbt.py_current_timestring": {
      "unique_id": "macro.dbt.py_current_timestring",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0856237,
      "supported_languages": null
    },
    "macro.dbt.statement": {
      "unique_id": "macro.dbt.statement",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "statement",
      "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0884542,
      "supported_languages": null
    },
    "macro.dbt.noop_statement": {
      "unique_id": "macro.dbt.noop_statement",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0895422,
      "supported_languages": null
    },
    "macro.dbt.run_query": {
      "unique_id": "macro.dbt.run_query",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0901222,
      "supported_languages": null
    },
    "macro.dbt.default__test_accepted_values": {
      "unique_id": "macro.dbt.default__test_accepted_values",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/accepted_values.sql",
      "original_file_path": "macros/generic_test_sql/accepted_values.sql",
      "name": "default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.091447,
      "supported_languages": null
    },
    "macro.dbt.default__test_not_null": {
      "unique_id": "macro.dbt.default__test_not_null",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/not_null.sql",
      "original_file_path": "macros/generic_test_sql/not_null.sql",
      "name": "default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_store_failures"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0923007,
      "supported_languages": null
    },
    "macro.dbt.default__test_relationships": {
      "unique_id": "macro.dbt.default__test_relationships",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/relationships.sql",
      "original_file_path": "macros/generic_test_sql/relationships.sql",
      "name": "default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0931954,
      "supported_languages": null
    },
    "macro.dbt.default__test_unique": {
      "unique_id": "macro.dbt.default__test_unique",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/generic_test_sql/unique.sql",
      "original_file_path": "macros/generic_test_sql/unique.sql",
      "name": "default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0939326,
      "supported_languages": null
    },
    "macro.dbt.generate_alias_name": {
      "unique_id": "macro.dbt.generate_alias_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_alias_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0948935,
      "supported_languages": null
    },
    "macro.dbt.default__generate_alias_name": {
      "unique_id": "macro.dbt.default__generate_alias_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0953364,
      "supported_languages": null
    },
    "macro.dbt.generate_database_name": {
      "unique_id": "macro.dbt.generate_database_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_database_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0963144,
      "supported_languages": null
    },
    "macro.dbt.default__generate_database_name": {
      "unique_id": "macro.dbt.default__generate_database_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0968194,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name": {
      "unique_id": "macro.dbt.generate_schema_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_schema_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0979862,
      "supported_languages": null
    },
    "macro.dbt.default__generate_schema_name": {
      "unique_id": "macro.dbt.default__generate_schema_name",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.098502,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name_for_env": {
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.0990684,
      "supported_languages": null
    },
    "macro.dbt.set_sql_header": {
      "unique_id": "macro.dbt.set_sql_header",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.100016,
      "supported_languages": null
    },
    "macro.dbt.should_full_refresh": {
      "unique_id": "macro.dbt.should_full_refresh",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1005995,
      "supported_languages": null
    },
    "macro.dbt.should_store_failures": {
      "unique_id": "macro.dbt.should_store_failures",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1012113,
      "supported_languages": null
    },
    "macro.dbt.run_hooks": {
      "unique_id": "macro.dbt.run_hooks",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1034093,
      "supported_languages": null
    },
    "macro.dbt.make_hook_config": {
      "unique_id": "macro.dbt.make_hook_config",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.103923,
      "supported_languages": null
    },
    "macro.dbt.before_begin": {
      "unique_id": "macro.dbt.before_begin",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1042068,
      "supported_languages": null
    },
    "macro.dbt.in_transaction": {
      "unique_id": "macro.dbt.in_transaction",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.104479,
      "supported_languages": null
    },
    "macro.dbt.after_commit": {
      "unique_id": "macro.dbt.after_commit",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1047506,
      "supported_languages": null
    },
    "macro.dbt.get_quoted_csv": {
      "unique_id": "macro.dbt.get_quoted_csv",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.107563,
      "supported_languages": null
    },
    "macro.dbt.diff_columns": {
      "unique_id": "macro.dbt.diff_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1086085,
      "supported_languages": null
    },
    "macro.dbt.diff_column_data_types": {
      "unique_id": "macro.dbt.diff_column_data_types",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1098864,
      "supported_languages": null
    },
    "macro.dbt.get_merge_update_columns": {
      "unique_id": "macro.dbt.get_merge_update_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "get_merge_update_columns",
      "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_merge_update_columns"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1103508,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_update_columns": {
      "unique_id": "macro.dbt.default__get_merge_update_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "default__get_merge_update_columns",
      "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1117103,
      "supported_languages": null
    },
    "macro.dbt.materialization_incremental_default": {
      "unique_id": "macro.dbt.materialization_incremental_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/incremental.sql",
      "name": "materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1203945,
      "supported_languages": ["sql"]
    },
    "macro.dbt.is_incremental": {
      "unique_id": "macro.dbt.is_incremental",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/is_incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
      "name": "is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_full_refresh"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1218243,
      "supported_languages": null
    },
    "macro.dbt.get_merge_sql": {
      "unique_id": "macro.dbt.get_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.128376,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_sql": {
      "unique_id": "macro.dbt.default__get_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1312459,
      "supported_languages": null
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1316974,
      "supported_languages": null
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.133075,
      "supported_languages": null
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1335626,
      "supported_languages": null
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1347876,
      "supported_languages": null
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1429932,
      "supported_languages": null
    },
    "macro.dbt.check_for_schema_changes": {
      "unique_id": "macro.dbt.check_for_schema_changes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1452007,
      "supported_languages": null
    },
    "macro.dbt.sync_column_schemas": {
      "unique_id": "macro.dbt.sync_column_schemas",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1475008,
      "supported_languages": null
    },
    "macro.dbt.process_schema_changes": {
      "unique_id": "macro.dbt.process_schema_changes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1492245,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_append_sql": {
      "unique_id": "macro.dbt.get_incremental_append_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_append_sql",
      "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_append_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1509588,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_append_sql": {
      "unique_id": "macro.dbt.default__get_incremental_append_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_append_sql",
      "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_insert_into_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1513977,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_delete_insert_sql": {
      "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_delete_insert_sql",
      "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.151749,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_delete_insert_sql": {
      "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_delete_insert_sql",
      "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_delete_insert_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1522534,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_merge_sql": {
      "unique_id": "macro.dbt.get_incremental_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_merge_sql",
      "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1526072,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_merge_sql": {
      "unique_id": "macro.dbt.default__get_incremental_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_merge_sql",
      "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1531062,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_insert_overwrite_sql": {
      "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1534624,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_insert_overwrite_sql": {
      "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_insert_overwrite_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.15397,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_default_sql": {
      "unique_id": "macro.dbt.get_incremental_default_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_default_sql",
      "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_default_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1543365,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_default_sql": {
      "unique_id": "macro.dbt.default__get_incremental_default_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_default_sql",
      "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_incremental_append_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.154637,
      "supported_languages": null
    },
    "macro.dbt.get_insert_into_sql": {
      "unique_id": "macro.dbt.get_insert_into_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_insert_into_sql",
      "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1551719,
      "supported_languages": null
    },
    "macro.dbt.get_create_table_as_sql": {
      "unique_id": "macro.dbt.get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "get_create_table_as_sql",
      "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_table_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1563306,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_table_as_sql": {
      "unique_id": "macro.dbt.default__get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__get_create_table_as_sql",
      "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_table_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1566896,
      "supported_languages": null
    },
    "macro.dbt.create_table_as": {
      "unique_id": "macro.dbt.create_table_as",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__create_table_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.157514,
      "supported_languages": null
    },
    "macro.dbt.default__create_table_as": {
      "unique_id": "macro.dbt.default__create_table_as",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.158312,
      "supported_languages": null
    },
    "macro.dbt.materialization_table_default": {
      "unique_id": "macro.dbt.materialization_table_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/table/table.sql",
      "original_file_path": "macros/materializations/models/table/table.sql",
      "name": "materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1631372,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_or_replace_view": {
      "unique_id": "macro.dbt.create_or_replace_view",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
      "name": "create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1660244,
      "supported_languages": null
    },
    "macro.dbt.get_create_view_as_sql": {
      "unique_id": "macro.dbt.get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "get_create_view_as_sql",
      "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_create_view_as_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1669638,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_view_as_sql": {
      "unique_id": "macro.dbt.default__get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__get_create_view_as_sql",
      "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_view_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1672807,
      "supported_languages": null
    },
    "macro.dbt.create_view_as": {
      "unique_id": "macro.dbt.create_view_as",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__create_view_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1676214,
      "supported_languages": null
    },
    "macro.dbt.default__create_view_as": {
      "unique_id": "macro.dbt.default__create_view_as",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1681197,
      "supported_languages": null
    },
    "macro.dbt.handle_existing_table": {
      "unique_id": "macro.dbt.handle_existing_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__handle_existing_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.168937,
      "supported_languages": null
    },
    "macro.dbt.default__handle_existing_table": {
      "unique_id": "macro.dbt.default__handle_existing_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1693492,
      "supported_languages": null
    },
    "macro.dbt.materialization_view_default": {
      "unique_id": "macro.dbt.materialization_view_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/models/view/view.sql",
      "original_file_path": "macros/materializations/models/view/view.sql",
      "name": "materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.173946,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_csv_table": {
      "unique_id": "macro.dbt.create_csv_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1812348,
      "supported_languages": null
    },
    "macro.dbt.default__create_csv_table": {
      "unique_id": "macro.dbt.default__create_csv_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1829185,
      "supported_languages": null
    },
    "macro.dbt.reset_csv_table": {
      "unique_id": "macro.dbt.reset_csv_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__reset_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1833663,
      "supported_languages": null
    },
    "macro.dbt.default__reset_csv_table": {
      "unique_id": "macro.dbt.default__reset_csv_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1842854,
      "supported_languages": null
    },
    "macro.dbt.get_csv_sql": {
      "unique_id": "macro.dbt.get_csv_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_csv_sql",
      "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_csv_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1846538,
      "supported_languages": null
    },
    "macro.dbt.default__get_csv_sql": {
      "unique_id": "macro.dbt.default__get_csv_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_csv_sql",
      "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.184932,
      "supported_languages": null
    },
    "macro.dbt.get_binding_char": {
      "unique_id": "macro.dbt.get_binding_char",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_binding_char"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1852095,
      "supported_languages": null
    },
    "macro.dbt.default__get_binding_char": {
      "unique_id": "macro.dbt.default__get_binding_char",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1854386,
      "supported_languages": null
    },
    "macro.dbt.get_batch_size": {
      "unique_id": "macro.dbt.get_batch_size",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__get_batch_size"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.185746,
      "supported_languages": null
    },
    "macro.dbt.default__get_batch_size": {
      "unique_id": "macro.dbt.default__get_batch_size",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1859915,
      "supported_languages": null
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.18716,
      "supported_languages": null
    },
    "macro.dbt.load_csv_rows": {
      "unique_id": "macro.dbt.load_csv_rows",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__load_csv_rows"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1875408,
      "supported_languages": null
    },
    "macro.dbt.default__load_csv_rows": {
      "unique_id": "macro.dbt.default__load_csv_rows",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.1898193,
      "supported_languages": null
    },
    "macro.dbt.materialization_seed_default": {
      "unique_id": "macro.dbt.materialization_seed_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/seeds/seed.sql",
      "original_file_path": "macros/materializations/seeds/seed.sql",
      "name": "materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.get_csv_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.195632,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_columns": {
      "unique_id": "macro.dbt.create_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_columns"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2015982,
      "supported_languages": null
    },
    "macro.dbt.default__create_columns": {
      "unique_id": "macro.dbt.default__create_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.20216,
      "supported_languages": null
    },
    "macro.dbt.post_snapshot": {
      "unique_id": "macro.dbt.post_snapshot",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__post_snapshot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2024996,
      "supported_languages": null
    },
    "macro.dbt.default__post_snapshot": {
      "unique_id": "macro.dbt.default__post_snapshot",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2026832,
      "supported_languages": null
    },
    "macro.dbt.get_true_sql": {
      "unique_id": "macro.dbt.get_true_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "get_true_sql",
      "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_true_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2029817,
      "supported_languages": null
    },
    "macro.dbt.default__get_true_sql": {
      "unique_id": "macro.dbt.default__get_true_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__get_true_sql",
      "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2032132,
      "supported_languages": null
    },
    "macro.dbt.snapshot_staging_table": {
      "unique_id": "macro.dbt.snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__snapshot_staging_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2035952,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_staging_table": {
      "unique_id": "macro.dbt.default__snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__snapshot_staging_table",
      "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_get_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2052329,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_table": {
      "unique_id": "macro.dbt.build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__build_snapshot_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2056012,
      "supported_languages": null
    },
    "macro.dbt.default__build_snapshot_table": {
      "unique_id": "macro.dbt.default__build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__build_snapshot_table",
      "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.206097,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_staging_table": {
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.206925,
      "supported_languages": null
    },
    "macro.dbt.materialization_snapshot_default": {
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot.sql",
      "name": "materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.217439,
      "supported_languages": ["sql"]
    },
    "macro.dbt.snapshot_merge_sql": {
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__snapshot_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2185178,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2190518,
      "supported_languages": null
    },
    "macro.dbt.strategy_dispatch": {
      "unique_id": "macro.dbt.strategy_dispatch",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2248802,
      "supported_languages": null
    },
    "macro.dbt.snapshot_hash_arguments": {
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__snapshot_hash_arguments"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.225217,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2256548,
      "supported_languages": null
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_hash_arguments"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2270007,
      "supported_languages": null
    },
    "macro.dbt.snapshot_string_as_time": {
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_trino.trino__snapshot_string_as_time"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2273319,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2276654,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2302375,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_strategy": {
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.get_true_sql",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.232751,
      "supported_languages": null
    },
    "macro.dbt.get_test_sql": {
      "unique_id": "macro.dbt.get_test_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_test_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2338288,
      "supported_languages": null
    },
    "macro.dbt.default__get_test_sql": {
      "unique_id": "macro.dbt.default__get_test_sql",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2344224,
      "supported_languages": null
    },
    "macro.dbt.materialization_test_default": {
      "unique_id": "macro.dbt.materialization_test_default",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/test.sql",
      "original_file_path": "macros/materializations/tests/test.sql",
      "name": "materialization_test_default",
      "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2382581,
      "supported_languages": ["sql"]
    },
    "macro.dbt.get_where_subquery": {
      "unique_id": "macro.dbt.get_where_subquery",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_where_subquery"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2392375,
      "supported_languages": null
    },
    "macro.dbt.default__get_where_subquery": {
      "unique_id": "macro.dbt.default__get_where_subquery",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.239976,
      "supported_languages": null
    },
    "macro.dbt.build_ref_function": {
      "unique_id": "macro.dbt.build_ref_function",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_ref_function",
      "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2426057,
      "supported_languages": null
    },
    "macro.dbt.build_source_function": {
      "unique_id": "macro.dbt.build_source_function",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_source_function",
      "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2434998,
      "supported_languages": null
    },
    "macro.dbt.build_config_dict": {
      "unique_id": "macro.dbt.build_config_dict",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_config_dict",
      "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2443655,
      "supported_languages": null
    },
    "macro.dbt.py_script_postfix": {
      "unique_id": "macro.dbt.py_script_postfix",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "py_script_postfix",
      "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.build_ref_function",
          "macro.dbt.build_source_function",
          "macro.dbt.build_config_dict",
          "macro.dbt.is_incremental",
          "macro.dbt.py_script_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2451475,
      "supported_languages": null
    },
    "macro.dbt.py_script_comment": {
      "unique_id": "macro.dbt.py_script_comment",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "py_script_comment",
      "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.245305,
      "supported_languages": null
    },
    "macro.dbt.any_value": {
      "unique_id": "macro.dbt.any_value",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "name": "any_value",
      "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__any_value"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.246063,
      "supported_languages": null
    },
    "macro.dbt.default__any_value": {
      "unique_id": "macro.dbt.default__any_value",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "name": "default__any_value",
      "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2462807,
      "supported_languages": null
    },
    "macro.dbt.array_append": {
      "unique_id": "macro.dbt.array_append",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "name": "array_append",
      "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__array_append"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2470968,
      "supported_languages": null
    },
    "macro.dbt.default__array_append": {
      "unique_id": "macro.dbt.default__array_append",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "name": "default__array_append",
      "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2473667,
      "supported_languages": null
    },
    "macro.dbt.array_concat": {
      "unique_id": "macro.dbt.array_concat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "name": "array_concat",
      "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__array_concat"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2481613,
      "supported_languages": null
    },
    "macro.dbt.default__array_concat": {
      "unique_id": "macro.dbt.default__array_concat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "name": "default__array_concat",
      "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2484279,
      "supported_languages": null
    },
    "macro.dbt.array_construct": {
      "unique_id": "macro.dbt.array_construct",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "name": "array_construct",
      "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__array_construct"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2493875,
      "supported_languages": null
    },
    "macro.dbt.default__array_construct": {
      "unique_id": "macro.dbt.default__array_construct",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "name": "default__array_construct",
      "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2498584,
      "supported_languages": null
    },
    "macro.dbt.bool_or": {
      "unique_id": "macro.dbt.bool_or",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "name": "bool_or",
      "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__bool_or"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.250603,
      "supported_languages": null
    },
    "macro.dbt.default__bool_or": {
      "unique_id": "macro.dbt.default__bool_or",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "name": "default__bool_or",
      "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2508342,
      "supported_languages": null
    },
    "macro.dbt.cast_bool_to_text": {
      "unique_id": "macro.dbt.cast_bool_to_text",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "name": "cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__cast_bool_to_text"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2515635,
      "supported_languages": null
    },
    "macro.dbt.default__cast_bool_to_text": {
      "unique_id": "macro.dbt.default__cast_bool_to_text",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "name": "default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2520182,
      "supported_languages": null
    },
    "macro.dbt.concat": {
      "unique_id": "macro.dbt.concat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "name": "concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__concat"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2527492,
      "supported_languages": null
    },
    "macro.dbt.default__concat": {
      "unique_id": "macro.dbt.default__concat",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "name": "default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2530222,
      "supported_languages": null
    },
    "macro.dbt.type_string": {
      "unique_id": "macro.dbt.type_string",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__type_string"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2548697,
      "supported_languages": null
    },
    "macro.dbt.default__type_string": {
      "unique_id": "macro.dbt.default__type_string",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2551773,
      "supported_languages": null
    },
    "macro.dbt.type_timestamp": {
      "unique_id": "macro.dbt.type_timestamp",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.255493,
      "supported_languages": null
    },
    "macro.dbt.default__type_timestamp": {
      "unique_id": "macro.dbt.default__type_timestamp",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.255799,
      "supported_languages": null
    },
    "macro.dbt.type_float": {
      "unique_id": "macro.dbt.type_float",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__type_float"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2561116,
      "supported_languages": null
    },
    "macro.dbt.default__type_float": {
      "unique_id": "macro.dbt.default__type_float",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2564063,
      "supported_languages": null
    },
    "macro.dbt.type_numeric": {
      "unique_id": "macro.dbt.type_numeric",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__type_numeric"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2567158,
      "supported_languages": null
    },
    "macro.dbt.default__type_numeric": {
      "unique_id": "macro.dbt.default__type_numeric",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2570698,
      "supported_languages": null
    },
    "macro.dbt.type_bigint": {
      "unique_id": "macro.dbt.type_bigint",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_bigint"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2573817,
      "supported_languages": null
    },
    "macro.dbt.default__type_bigint": {
      "unique_id": "macro.dbt.default__type_bigint",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.257676,
      "supported_languages": null
    },
    "macro.dbt.type_int": {
      "unique_id": "macro.dbt.type_int",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__type_int"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2580018,
      "supported_languages": null
    },
    "macro.dbt.default__type_int": {
      "unique_id": "macro.dbt.default__type_int",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_int",
      "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.258284,
      "supported_languages": null
    },
    "macro.dbt.type_boolean": {
      "unique_id": "macro.dbt.type_boolean",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_boolean",
      "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_boolean"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.258602,
      "supported_languages": null
    },
    "macro.dbt.default__type_boolean": {
      "unique_id": "macro.dbt.default__type_boolean",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_boolean",
      "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2589035,
      "supported_languages": null
    },
    "macro.dbt.date_trunc": {
      "unique_id": "macro.dbt.date_trunc",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "name": "date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__date_trunc"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2596896,
      "supported_languages": null
    },
    "macro.dbt.default__date_trunc": {
      "unique_id": "macro.dbt.default__date_trunc",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "name": "default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.259971,
      "supported_languages": null
    },
    "macro.dbt.dateadd": {
      "unique_id": "macro.dbt.dateadd",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "name": "dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__dateadd"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2608666,
      "supported_languages": null
    },
    "macro.dbt.default__dateadd": {
      "unique_id": "macro.dbt.default__dateadd",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "name": "default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2611952,
      "supported_languages": null
    },
    "macro.dbt.datediff": {
      "unique_id": "macro.dbt.datediff",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "name": "datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2620826,
      "supported_languages": null
    },
    "macro.dbt.default__datediff": {
      "unique_id": "macro.dbt.default__datediff",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "name": "default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.262537,
      "supported_languages": null
    },
    "macro.dbt.escape_single_quotes": {
      "unique_id": "macro.dbt.escape_single_quotes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "name": "escape_single_quotes",
      "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__escape_single_quotes"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2633188,
      "supported_languages": null
    },
    "macro.dbt.default__escape_single_quotes": {
      "unique_id": "macro.dbt.default__escape_single_quotes",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "name": "default__escape_single_quotes",
      "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.263593,
      "supported_languages": null
    },
    "macro.dbt.except": {
      "unique_id": "macro.dbt.except",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "name": "except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__except"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.264301,
      "supported_languages": null
    },
    "macro.dbt.default__except": {
      "unique_id": "macro.dbt.default__except",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "name": "default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2644634,
      "supported_languages": null
    },
    "macro.dbt.hash": {
      "unique_id": "macro.dbt.hash",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "name": "hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__hash"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.265222,
      "supported_languages": null
    },
    "macro.dbt.default__hash": {
      "unique_id": "macro.dbt.default__hash",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "name": "default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2655375,
      "supported_languages": null
    },
    "macro.dbt.intersect": {
      "unique_id": "macro.dbt.intersect",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "name": "intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__intersect"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2662525,
      "supported_languages": null
    },
    "macro.dbt.default__intersect": {
      "unique_id": "macro.dbt.default__intersect",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "name": "default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.266423,
      "supported_languages": null
    },
    "macro.dbt.last_day": {
      "unique_id": "macro.dbt.last_day",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2673318,
      "supported_languages": null
    },
    "macro.dbt.default_last_day": {
      "unique_id": "macro.dbt.default_last_day",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "default_last_day",
      "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2678475,
      "supported_languages": null
    },
    "macro.dbt.default__last_day": {
      "unique_id": "macro.dbt.default__last_day",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default_last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2681446,
      "supported_languages": null
    },
    "macro.dbt.length": {
      "unique_id": "macro.dbt.length",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "name": "length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__length"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2689083,
      "supported_languages": null
    },
    "macro.dbt.default__length": {
      "unique_id": "macro.dbt.default__length",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "name": "default__length",
      "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2691286,
      "supported_languages": null
    },
    "macro.dbt.listagg": {
      "unique_id": "macro.dbt.listagg",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "name": "listagg",
      "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__listagg"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.270459,
      "supported_languages": null
    },
    "macro.dbt.default__listagg": {
      "unique_id": "macro.dbt.default__listagg",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "name": "default__listagg",
      "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2712467,
      "supported_languages": null
    },
    "macro.dbt.string_literal": {
      "unique_id": "macro.dbt.string_literal",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "name": "string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__string_literal"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2720068,
      "supported_languages": null
    },
    "macro.dbt.default__string_literal": {
      "unique_id": "macro.dbt.default__string_literal",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "name": "default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2722187,
      "supported_languages": null
    },
    "macro.dbt.position": {
      "unique_id": "macro.dbt.position",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "name": "position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__position"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.273031,
      "supported_languages": null
    },
    "macro.dbt.default__position": {
      "unique_id": "macro.dbt.default__position",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "name": "default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.273304,
      "supported_languages": null
    },
    "macro.dbt.replace": {
      "unique_id": "macro.dbt.replace",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "name": "replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__replace"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2741807,
      "supported_languages": null
    },
    "macro.dbt.default__replace": {
      "unique_id": "macro.dbt.default__replace",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "name": "default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2745159,
      "supported_languages": null
    },
    "macro.dbt.right": {
      "unique_id": "macro.dbt.right",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "name": "right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__right"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2753463,
      "supported_languages": null
    },
    "macro.dbt.default__right": {
      "unique_id": "macro.dbt.default__right",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "name": "default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2757351,
      "supported_languages": null
    },
    "macro.dbt.safe_cast": {
      "unique_id": "macro.dbt.safe_cast",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "name": "safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__safe_cast"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2765539,
      "supported_languages": null
    },
    "macro.dbt.default__safe_cast": {
      "unique_id": "macro.dbt.default__safe_cast",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "name": "default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2768533,
      "supported_languages": null
    },
    "macro.dbt.split_part": {
      "unique_id": "macro.dbt.split_part",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_trino.trino__split_part"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2779975,
      "supported_languages": null
    },
    "macro.dbt.default__split_part": {
      "unique_id": "macro.dbt.default__split_part",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2783368,
      "supported_languages": null
    },
    "macro.dbt._split_part_negative": {
      "unique_id": "macro.dbt._split_part_negative",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "_split_part_negative",
      "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2787776,
      "supported_languages": null
    },
    "macro.dbt.test_unique": {
      "unique_id": "macro.dbt.test_unique",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_unique"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2799547,
      "supported_languages": null
    },
    "macro.dbt.test_not_null": {
      "unique_id": "macro.dbt.test_not_null",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_not_null"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.280406,
      "supported_languages": null
    },
    "macro.dbt.test_accepted_values": {
      "unique_id": "macro.dbt.test_accepted_values",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_accepted_values"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2809618,
      "supported_languages": null
    },
    "macro.dbt.test_relationships": {
      "unique_id": "macro.dbt.test_relationships",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_relationships"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.281482,
      "supported_languages": null
    },
    "macro.codegen.generate_base_model": {
      "unique_id": "macro.codegen.generate_base_model",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_base_model.sql",
      "original_file_path": "macros/generate_base_model.sql",
      "name": "generate_base_model",
      "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2854366,
      "supported_languages": null
    },
    "macro.codegen.generate_column_yaml": {
      "unique_id": "macro.codegen.generate_column_yaml",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "name": "generate_column_yaml",
      "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.codegen.generate_column_yaml"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2892528,
      "supported_languages": null
    },
    "macro.codegen.generate_model_yaml": {
      "unique_id": "macro.codegen.generate_model_yaml",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "name": "generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.codegen.build_dict_column_descriptions",
          "macro.codegen.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.2918143,
      "supported_languages": null
    },
    "macro.codegen.generate_model_import_ctes": {
      "unique_id": "macro.codegen.generate_model_import_ctes",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_model_import_ctes.sql",
      "original_file_path": "macros/generate_model_import_ctes.sql",
      "name": "generate_model_import_ctes",
      "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3138208,
      "supported_languages": null
    },
    "macro.codegen.get_tables_in_schema": {
      "unique_id": "macro.codegen.get_tables_in_schema",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "name": "get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_relations_by_pattern"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3172822,
      "supported_languages": null
    },
    "macro.codegen.generate_source": {
      "unique_id": "macro.codegen.generate_source",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "name": "generate_source",
      "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.codegen.get_tables_in_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.321477,
      "supported_languages": null
    },
    "macro.codegen.get_model_dependencies": {
      "unique_id": "macro.codegen.get_model_dependencies",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "name": "get_model_dependencies",
      "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3228052,
      "supported_languages": null
    },
    "macro.codegen.add_model_column_descriptions_to_dict": {
      "unique_id": "macro.codegen.add_model_column_descriptions_to_dict",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "name": "add_model_column_descriptions_to_dict",
      "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3237019,
      "supported_languages": null
    },
    "macro.codegen.build_dict_column_descriptions": {
      "unique_id": "macro.codegen.build_dict_column_descriptions",
      "package_name": "codegen",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "name": "build_dict_column_descriptions",
      "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.codegen.get_model_dependencies",
          "macro.codegen.add_model_column_descriptions_to_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3245249,
      "supported_languages": null
    },
    "macro.dbt_utils.get_powers_of_two": {
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3261666,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3269744,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_series": {
      "unique_id": "macro.dbt_utils.generate_series",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__generate_series"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3273418,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_series": {
      "unique_id": "macro.dbt_utils.default__generate_series",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_powers_of_two"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.328334,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3293588,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_tables_by_pattern_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3299072,
      "supported_languages": null
    },
    "macro.dbt_utils.degrees_to_radians": {
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3318963,
      "supported_languages": null
    },
    "macro.dbt_utils.haversine_distance": {
      "unique_id": "macro.dbt_utils.haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__haversine_distance"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3324132,
      "supported_languages": null
    },
    "macro.dbt_utils.default__haversine_distance": {
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3334672,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.degrees_to_radians"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3349905,
      "supported_languages": null
    },
    "macro.dbt_utils.get_filtered_columns_in_relation": {
      "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "name": "get_filtered_columns_in_relation",
      "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3360991,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_filtered_columns_in_relation": {
      "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "name": "default__get_filtered_columns_in_relation",
      "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3374674,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_add": {
      "unique_id": "macro.dbt_utils.safe_add",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "safe_add",
      "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__safe_add"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3384476,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_add": {
      "unique_id": "macro.dbt_utils.default__safe_add",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3394809,
      "supported_languages": null
    },
    "macro.dbt_utils.surrogate_key": {
      "unique_id": "macro.dbt_utils.surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__surrogate_key"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.340475,
      "supported_languages": null
    },
    "macro.dbt_utils.default__surrogate_key": {
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.340949,
      "supported_languages": null
    },
    "macro.dbt_utils.get_single_value": {
      "unique_id": "macro.dbt_utils.get_single_value",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "name": "get_single_value",
      "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_single_value"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.342118,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_single_value": {
      "unique_id": "macro.dbt_utils.default__get_single_value",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "name": "default__get_single_value",
      "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3436391,
      "supported_languages": null
    },
    "macro.dbt_utils.unpivot": {
      "unique_id": "macro.dbt_utils.unpivot",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__unpivot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3460197,
      "supported_languages": null
    },
    "macro.dbt_utils.default__unpivot": {
      "unique_id": "macro.dbt_utils.default__unpivot",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.type_string",
          "macro.dbt.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3489532,
      "supported_languages": null
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_query_results_as_dict"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3499422,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.351081,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.353904,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_table_types_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3546085,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._bigquery__get_matching_schemata",
          "macro.dbt_utils.get_table_types_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3559642,
      "supported_languages": null
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "_bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3569324,
      "supported_languages": null
    },
    "macro.dbt_utils.get_table_types_sql": {
      "unique_id": "macro.dbt_utils.get_table_types_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "name": "get_table_types_sql",
      "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_table_types_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3578813,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_table_types_sql": {
      "unique_id": "macro.dbt_utils.default__get_table_types_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "name": "default__get_table_types_sql",
      "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3581636,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__get_table_types_sql": {
      "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "name": "postgres__get_table_types_sql",
      "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.358444,
      "supported_languages": null
    },
    "macro.dbt_utils.get_column_values": {
      "unique_id": "macro.dbt_utils.get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_column_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.360497,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_column_values": {
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.load_relation",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3633804,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck_table": {
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__nullcheck_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3642607,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3649223,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck": {
      "unique_id": "macro.dbt_utils.nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__nullcheck"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3658164,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck": {
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.366475,
      "supported_languages": null
    },
    "macro.dbt_utils.get_intervals_between": {
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_intervals_between"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3679302,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement", "macro.dbt.datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3690372,
      "supported_languages": null
    },
    "macro.dbt_utils.date_spine": {
      "unique_id": "macro.dbt_utils.date_spine",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__date_spine"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3694782,
      "supported_languages": null
    },
    "macro.dbt_utils.default__date_spine": {
      "unique_id": "macro.dbt_utils.default__date_spine",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3701632,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3715749,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3731508,
      "supported_languages": null
    },
    "macro.dbt_utils.width_bucket": {
      "unique_id": "macro.dbt_utils.width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "name": "width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__width_bucket"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3756115,
      "supported_languages": null
    },
    "macro.dbt_utils.default__width_bucket": {
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "name": "default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3764927,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__width_bucket": {
      "unique_id": "macro.dbt_utils.redshift__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "name": "redshift__width_bucket",
      "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3773625,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "name": "snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3777223,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_prefix"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3791263,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3806772,
      "supported_languages": null
    },
    "macro.dbt_utils.deduplicate": {
      "unique_id": "macro.dbt_utils.deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "deduplicate",
      "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__deduplicate"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3821764,
      "supported_languages": null
    },
    "macro.dbt_utils.default__deduplicate": {
      "unique_id": "macro.dbt_utils.default__deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "default__deduplicate",
      "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3826015,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__deduplicate": {
      "unique_id": "macro.dbt_utils.redshift__deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "redshift__deduplicate",
      "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__deduplicate"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.383004,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__deduplicate": {
      "unique_id": "macro.dbt_utils.postgres__deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "postgres__deduplicate",
      "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3833752,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__deduplicate": {
      "unique_id": "macro.dbt_utils.snowflake__deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "snowflake__deduplicate",
      "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3836997,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__deduplicate": {
      "unique_id": "macro.dbt_utils.bigquery__deduplicate",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "name": "bigquery__deduplicate",
      "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.384155,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_surrogate_key": {
      "unique_id": "macro.dbt_utils.generate_surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "name": "generate_surrogate_key",
      "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__generate_surrogate_key"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3852265,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_surrogate_key": {
      "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "name": "default__generate_surrogate_key",
      "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.type_string",
          "macro.dbt.hash",
          "macro.dbt.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3864336,
      "supported_languages": null
    },
    "macro.dbt_utils.star": {
      "unique_id": "macro.dbt_utils.star",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__star"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3886101,
      "supported_languages": null
    },
    "macro.dbt_utils.default__star": {
      "unique_id": "macro.dbt_utils.default__star",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.get_filtered_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3911839,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_divide": {
      "unique_id": "macro.dbt_utils.safe_divide",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "name": "safe_divide",
      "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__safe_divide"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.392004,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_divide": {
      "unique_id": "macro.dbt_utils.default__safe_divide",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "name": "default__safe_divide",
      "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3922694,
      "supported_languages": null
    },
    "macro.dbt_utils.group_by": {
      "unique_id": "macro.dbt_utils.group_by",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__group_by"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3930554,
      "supported_languages": null
    },
    "macro.dbt_utils.default__group_by": {
      "unique_id": "macro.dbt_utils.default__group_by",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3935263,
      "supported_languages": null
    },
    "macro.dbt_utils.union_relations": {
      "unique_id": "macro.dbt_utils.union_relations",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__union_relations"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.3982537,
      "supported_languages": null
    },
    "macro.dbt_utils.default__union_relations": {
      "unique_id": "macro.dbt_utils.default__union_relations",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.string_literal",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4046907,
      "supported_languages": null
    },
    "macro.dbt_utils.pivot": {
      "unique_id": "macro.dbt_utils.pivot",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__pivot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4067225,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pivot": {
      "unique_id": "macro.dbt_utils.default__pivot",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.408297,
      "supported_languages": null
    },
    "macro.dbt_utils.slugify": {
      "unique_id": "macro.dbt_utils.slugify",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "name": "slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4097173,
      "supported_languages": null
    },
    "macro.dbt_utils._is_ephemeral": {
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/_is_ephemeral.sql",
      "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
      "name": "_is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4114857,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_time": {
      "unique_id": "macro.dbt_utils.pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__pretty_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.412298,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_time": {
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4126682,
      "supported_languages": null
    },
    "macro.dbt_utils._is_relation": {
      "unique_id": "macro.dbt_utils._is_relation",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/_is_relation.sql",
      "original_file_path": "macros/jinja_helpers/_is_relation.sql",
      "name": "_is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4137485,
      "supported_languages": null
    },
    "macro.dbt_utils.log_info": {
      "unique_id": "macro.dbt_utils.log_info",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__log_info"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.414521,
      "supported_languages": null
    },
    "macro.dbt_utils.default__log_info": {
      "unique_id": "macro.dbt_utils.default__log_info",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.pretty_log_format"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4148672,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_log_format": {
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__pretty_log_format"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4156206,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.pretty_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4159582,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_empty_string": {
      "unique_id": "macro.dbt_utils.test_not_empty_string",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "name": "test_not_empty_string",
      "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_empty_string"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4170806,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_empty_string": {
      "unique_id": "macro.dbt_utils.default__test_not_empty_string",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "name": "default__test_not_empty_string",
      "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4176512,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "name": "test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_accepted_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4188724,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "name": "default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4196007,
      "supported_languages": null
    },
    "macro.dbt_utils.test_relationships_where": {
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "name": "test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_relationships_where"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4209664,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "name": "default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4216087,
      "supported_languages": null
    },
    "macro.dbt_utils.test_expression_is_true": {
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "name": "test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4226232,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "name": "default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_store_failures"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4233167,
      "supported_languages": null
    },
    "macro.dbt_utils.test_accepted_range": {
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "name": "test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_accepted_range"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.424631,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "name": "default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.425645,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "name": "test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_null_proportion"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.42703,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "name": "default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.428527,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equality": {
      "unique_id": "macro.dbt_utils.test_equality",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "name": "test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__test_equality"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4300444,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equality": {
      "unique_id": "macro.dbt_utils.default__test_equality",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "name": "default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4317143,
      "supported_languages": null
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "name": "test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4369586,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "name": "default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4397948,
      "supported_languages": null
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "name": "test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_cardinality_equality"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4410012,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "name": "default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.except"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4416423,
      "supported_languages": null
    },
    "macro.dbt_utils.test_sequential_values": {
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "name": "test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_sequential_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.443399,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "name": "default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.slugify",
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4450898,
      "supported_languages": null
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "name": "test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4464297,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "name": "default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4476395,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "name": "test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_equal_rowcount"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4493024,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "name": "default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4513068,
      "supported_languages": null
    },
    "macro.dbt_utils.test_recency": {
      "unique_id": "macro.dbt_utils.test_recency",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "name": "test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__test_recency"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4528298,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_recency": {
      "unique_id": "macro.dbt_utils.default__test_recency",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "name": "default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.current_timestamp",
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4544723,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_constant": {
      "unique_id": "macro.dbt_utils.test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "name": "test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_constant"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4555502,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_constant": {
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "name": "default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.456421,
      "supported_languages": null
    },
    "macro.dbt_utils.test_at_least_one": {
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "name": "test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_at_least_one"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4575052,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "name": "default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.458386,
      "supported_languages": null
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "name": "test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_fewer_rows_than"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.460354,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "name": "default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4622412,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_host": {
      "unique_id": "macro.dbt_utils.get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_url_host"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4631531,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_host": {
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.split_part",
          "macro.dbt.replace",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4640195,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_path": {
      "unique_id": "macro.dbt_utils.get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_url_path"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.465094,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_path": {
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.replace",
          "macro.dbt.position",
          "macro.dbt.split_part",
          "macro.dbt.right",
          "macro.dbt.length",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.466308,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_parameter": {
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_url_parameter"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4671803,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/opt/app-root/src/PCAF-sovereign-footprint/dbt/pcaf_transform/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.split_part"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1680944627.4677942,
      "supported_languages": null
    }
  },
  "docs": {
    "dbt.__overview__": {
      "unique_id": "dbt.__overview__",
      "package_name": "dbt",
      "root_path": "/opt/app-root/lib64/python3.8/site-packages/dbt/include/global_project",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "name": "__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
    }
  },
  "exposures": {},
  "metrics": {},
  "selectors": {},
  "disabled": {},
  "parent_map": {
    "model.pcaf_transform.sf_wdi_gdp": [],
    "model.pcaf_transform.sf_wdi_population": [],
    "model.pcaf_transform.sf_oecd_exgr_dco2": [],
    "model.pcaf_transform.sf_unfccc_without_lulucf": [],
    "model.pcaf_transform.sf_primap_hist_emissions": [],
    "model.pcaf_transform.sf_oecd_exch_rates": [],
    "model.pcaf_transform.sf_oecd_imgr_fco2": [],
    "model.pcaf_transform.sf_unfccc_with_lulucf": [],
    "model.pcaf_transform.sf_unfccc_results": [],
    "model.pcaf_transform.sf_total_sovereign_emissions": []
  },
  "child_map": {
    "model.pcaf_transform.sf_wdi_gdp": [],
    "model.pcaf_transform.sf_wdi_population": [],
    "model.pcaf_transform.sf_oecd_exgr_dco2": [],
    "model.pcaf_transform.sf_unfccc_without_lulucf": [],
    "model.pcaf_transform.sf_primap_hist_emissions": [],
    "model.pcaf_transform.sf_oecd_exch_rates": [],
    "model.pcaf_transform.sf_oecd_imgr_fco2": [],
    "model.pcaf_transform.sf_unfccc_with_lulucf": [],
    "model.pcaf_transform.sf_unfccc_results": [],
    "model.pcaf_transform.sf_total_sovereign_emissions": []
  }
}
